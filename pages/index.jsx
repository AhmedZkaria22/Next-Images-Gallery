import React, { Suspense, useState } from "react";
import Head from "next/head";
import dynamic from "next/dynamic";
import PhotosList from "@/components/list/PhotosList/PhotosList";
import SearchInput from "@/components/search/SearchInput";
import { Badge, Grid, Typography } from "@mui/material";
import FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';
import TurnedInNotIcon from '@mui/icons-material/TurnedInNot';
import Cookies from "js-cookie";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import general_styles from "@/styles/General.module.css";

const TopicsLazy = dynamic( () => { return import('../components/list/TopicsList/TopicsList') }, {
  ssr: false
} )


const inter = Inter({ subsets: ["latin"] });

export default function Home() {

  const [topicId, setTopicId] = useState(Cookies.get('topic_id'));
  const [imagesData, setImagesData] = useState([]);
  const [querySearch, setQuerySearch] = useState('');
  const [lovedCount, setLovedCount] = useState(0);
  const [savedCount, setSavedCount] = useState(0);
  const [listType, setListType] = useState('');

  return (
    <>
      <Head>
        <title>Next Images Gallery</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      <main className={`${styles.main} ${inter.className}`} id="home_page">
        <Grid container item xs={12} className={`${general_styles.page_head}`}>
          <Grid item xs={'auto'}>
            <Typography component={'h1'} className={`${general_styles.head_text}`}>Next Images Gallery</Typography>
          </Grid>
          
          <Grid item xs={'auto'} className={`${general_styles.page_head_controlls}`}>
            <Badge badgeContent={lovedCount} color="error">
              <FavoriteBorderIcon color="action" />
            </Badge>
            <Badge badgeContent={savedCount} color="secondary">
              <TurnedInNotIcon color="action" />
            </Badge>
            
            <SearchInput 
              className={`${general_styles.page_head_controlls_search}`}
              change={(e) => {
                setListType('TypingFilter');
                setQuerySearch(e?.target?.value);
              }}
              click={() => setListType('filtered')}
            />
          </Grid>
        </Grid>
        

          {/* <TopicsList setTopicId={setTopicId} preventQuerySearchCall={() => setQuerySearchCall(false)}/> */}
        <Suspense fallback={<div>Loading ...</div>}>
          <TopicsLazy setTopicId={setTopicId} preventQuerySearchCall={() => setListType('notFiltered')}/>
        </Suspense>

        {
          listType === 'filtered'
           ? <PhotosList listType={'filtered'} querySearch={querySearch} topicId={undefined} setTopicId={setTopicId} imagesData={imagesData}  setImagesData={setImagesData} setLovedCount={setLovedCount}  setSavedCount={setSavedCount} />
           : listType === 'TypingFilter'
           ? <PhotosList listType={'TypingFilter'} querySearch={querySearch} topicId={undefined} setTopicId={setTopicId} imagesData={imagesData}  setImagesData={setImagesData} setLovedCount={setLovedCount}  setSavedCount={setSavedCount} />
           : topicId != undefined
           ? <PhotosList listType={'topiced'} querySearch={null} topicId={topicId} imagesData={imagesData}  setImagesData={setImagesData} preventQuerySearchCall={() => {setListType('notFiltered'); setListType('notFiltered');}} setLovedCount={setLovedCount}  setSavedCount={setSavedCount} />
           : <PhotosList listType={'normal'} querySearch={undefined} topicId={undefined} setTopicId={setTopicId} imagesData={imagesData}  setImagesData={setImagesData} preventQuerySearchCall={() => {setListType('notFiltered'); setListType('notFiltered');}} setLovedCount={setLovedCount}  setSavedCount={setSavedCount} />
        }

      </main>
    </>
  );
}
